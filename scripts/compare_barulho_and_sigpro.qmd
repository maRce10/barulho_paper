---
title: Compare baRulho and SIGPRO measurements
subtitle: baRulho:quantifying habitat-induced degradation of (animal) acoustic signals
author: Marcelo Araya-Salas
date: "`r Sys.Date()`"
toc: true
toc-depth: 3
toc-location: left
number-sections: true
highlight-style: pygments
format:
  html:
    code-fold: show
    code-tools: true
    code-copy: true
    embed-resources: true
editor_options: 
  chunk_output_type: console
---


<!-- this code add line numbers to code blocks -->
<!-- only works when code folding is not used in yaml (code_folding: show) -->

<style>
body
  { counter-reset: source-line 0; }
pre.numberSource code
  { counter-reset: none; }
</style>

```{r setup style, echo = FALSE, message = FALSE, warning=FALSE}

# options to customize chunk outputs
knitr::opts_chunk$set(
  class.source = "numberLines lineAnchors", # for code line numbers
  tidy.opts = list(width.cutoff = 65), 
  tidy = TRUE,
  message = FALSE,
  warning = FALSE
 )

```


```{r load packages and setup style, echo = FALSE, message = FALSE, warning=FALSE}

# github packages must include user name ("user/package")
# knitr is require for creating html/pdf/word reports
# kableExtra is used to print pretty formatted tables 
# formatR is used for soft-wrapping code
# klippy is used for adding a copy button to each code block
pkgs <- c("remotes", "kableExtra", "knitr", "formatR", "rprojroot", github = "maRce10/warbleR", github = "maRce10/ohun", github = "maRce10/baRulho", "tidyr", "viridis")

source("https://raw.githubusercontent.com/maRce10/sketchy/main/R/load_packages.R")

# install/ load packages
load_packages(packages =pkgs)

path_to_files <- "/home/m/Dropbox/Projects/barulho_paper/data/raw/tlalpan_data"

master_annotations <- read.csv(file.path(path_to_files, "master_annotations.csv"))

source("~/Dropbox/R_package_testing/baRulho/R/synth_sounds.R")
source("~/Dropbox/R_package_testing/baRulho/R/align_test_files.R")
source("~/Dropbox/R_package_testing/baRulho/R/find_markers.R")
```


```{r load packages, echo = FALSE, message = FALSE, warning=FALSE}

# github packages must include user name ("user/package")
# knitr is require for creating html/pdf/word reports
# kableExtra is used to print pretty formatted tables 
# formatR is used for soft-wrapping code
# klippy is used for adding a copy button to each code block
pkgs <- c("rlesur/klippy", "kableExtra", "knitr", "formatR", "rprojroot", "readxl", "ggplot2", "viridis", "corrplot", "maRce10/baRulho", "irr")

# install/ load packages
out <- lapply(pkgs, function(y) {
  
  # get pakage name
  pkg <- strsplit(y, "/")[[1]]
  pkg <- pkg[length(pkg)]
  
  # check if installed, if not then install 
  if (!pkg %in% installed.packages()[,"Package"])  {

      if (grepl("/", y))  remotes::install_github(y, force = TRUE) else
    install.packages(y) 
    }

  # load package
  a <- try(require(pkg, character.only = T), silent = T)

  if (!a) remove.packages(pkg)
 })

```

```{r setup chunks, include = FALSE}

# set working directory as project directory or one directory above,
rootdir <- try(rprojroot::find_rstudio_root_file(), silent = TRUE)
if (is(rootdir, "try-error")) rootdir <-  ".."
opts_knit$set(root.dir = rootdir)

# options to customize chunk outputs
knitr::opts_chunk$set(
  class.source = "numberLines lineAnchors", # for code line numbers
  tidy.opts = list(width.cutoff = 65), 
  tidy = TRUE,
  message = FALSE,
  warning = FALSE
 )

# this is a customized printing style data frames 
# screws up tibble function
tibble <- function(x, ...) { 
  x <- kbl(x, digits=4, align= 'c', row.names = FALSE) 
   x <- kable_styling(x, position ="center", full_width = FALSE,  bootstrap_options = c("striped", "hover", "condensed", "responsive")) 
   asis_output(x)
}

registerS3method("knit_print", "data.frame", tibble)

# to add copy button to code blocks
klippy::klippy(position = c('top', 'right'))

theme_set(theme_classic(base_size = 20))

cap_fun <- function(x) {
    s <- strsplit(x, " ")[[1]]
    paste(toupper(substring(s, 1, 1)), substring(s, 2),
          sep = "", collapse = " ")
}

```

<style>
body
  { counter-reset: source-line 0; }
pre.numberSource code
  { counter-reset: none; }
</style>


<!-- '&nbsp;' adds blank space -->

&nbsp; 

<!-- skyblue box -->

<div class="alert alert-info">

# Purpose

- Explore SIGPRO output

- Compare measurements between SIGPRO and baRulho

</div>

&nbsp; 

<!-- light brown box -->


<div class="alert alert-warning">

# Report overview

- [Compare SIGPRO and baRulho](#compare-sigpro-and-barulho)
  - [Takeaways](#takeaways)

</div>

&nbsp;


# Explore SIGPRO data

- Clips: measurements on cuts right at the start of the re-recorded sounds. **More precise**.
- Full recordings: measurements taken on the original re-recored files, so start of sounds was foud manually. **Less precise**. This is the default method when using SIGPRO.

```{r read sigpro data}

# sigpro_data <- as.data.frame(read_excel("./data/raw/sigpro_measurements_V02.xlsx"))
sigpro_data <- as.data.frame(read_excel("./data/raw/sigpro_measurements.xlsx"))

sigpro_data$SNR <- as.numeric(sigpro_data$SNR)
sigpro_data$TSR <- as.numeric(sigpro_data$TSR)

# exclude measurements on the first round for clips (did not include TSR)
sigpro_data <- sigpro_data[sigpro_data$format != "Clips 1st round", ]

names(sigpro_data)[names(sigpro_data) %in% c("Blur ratio (E-blur)", "E-Match k" )]<- c("blur_ratio", "k")

# fix outliers
sigpro_data$blur_ratio[sigpro_data$blur_ratio > 20] <- NA

sigpro_data$k[sigpro_data$k > 20] <- NA

# fix labels
sigpro_data$format <- ifelse(sigpro_data$format == "Completo", "Full recording",  "Clips")


# excess attenuation no extra dB adding 
#chirras
sigpro_data$excess_attenuation <- (-20 * log(sigpro_data$k)) - (6 / (2 * (sigpro_data$distance - 1)))

# Darden
# sigpro_data$excess_attenuation <- (-20 * log(sigpro_data$k)) - (20 * log(sigpro_data$distance / 10))


# Maad
# att_geo_fac <- 1 / 20
# -20*log10(att_geo_fac)
# sigpro_data$excess_attenuation.maad <- (-20 * log10(sigpro_data$k)) - (20 * log10(1 / sigpro_data$distance))
# sigpro_data$excess_attenuation.luis <- (-20 * log(sigpro_data$k)) - (6 / (2 * (sigpro_data$distance - 1)))

sigpro_data$excess_attenuation[is.infinite(sigpro_data$excess_attenuation) | is.nan(sigpro_data$excess_attenuation)]  <- NA
# sigpro_data$excess_attenuation.luis[is.infinite(sigpro_data$excess_attenuation.luis)] <- NA

degrad_params <- c("SNR", "TSR", "blur_ratio", "k", "excess_attenuation")

```


# Compare SIGPRO and baRulho

Re-measuring transmission parameters:
```{r read data est simulations, eval = FALSE, echo = FALSE}

est.alg.sim.all <- readRDS("./data/raw/extended_sel_tab_tests_simulated_tests_sounds.RDS")

names(est.alg.sim.all)[13] <- "distance" 

est.alg.sim.all$signal.type <- as.character(est.alg.sim.all$template)

sigpro_data$sound.files <- paste0(sigpro_data$org.sf, ".wav_", sigpro_data$sound)

sum(est.alg.sim.all$sound.files %in% sigpro_data$sound.files)

est_sigpro_subdata <- est.alg.sim.all[(est.alg.sim.all$sound.files %in% sigpro_data$sound.files) | (est.alg.sim.all$distance == 1 & sapply(strsplit(est.alg.sim.all$sound.files, "_"), function(x) x[[2]]) %in%  sigpro_data$sound), ]

saveRDS(est_sigpro_subdata, "./data/raw/extended_sel_tab_tests_simulated_tests_sounds_sigpro_subdata.RDS")

```

```{r measure degradation, eval = FALSE, echo = FALSE}

est_sigpro_subdata <- readRDS("./data/raw/extended_sel_tab_tests_simulated_tests_sounds_sigpro_subdata.RDS")

# measure degradation
est_sigpro_subdata <- signal_to_noise_ratio(est_sigpro_subdata, mar = 0.02, pb = FALSE, parallel = 10, type = 1, wl = 512, ovlp = 50)
source("~/Dropbox/R_package_testing/baRulho/R/internal_functions.R")
source("~/Dropbox/R_package_testing/baRulho/R/blur_ratio.R")

est_sigpro_subdata <- blur_ratio(est_sigpro_subdata, pb = FALSE, parallel = 1, wl = 512, ovlp = 50, ssmooth = NULL)

source("~/Dropbox/R_package_testing/baRulho/R/tail_to_signal_ratio.R")

est_sigpro_subdata <- tail_to_signal_ratio(est_sigpro_subdata, pb = FALSE, parallel = 10, mar = 0.04, type = 1, wl = 512, ovlp = 0)

source("~/Dropbox/R_package_testing/baRulho/R/excess_attenuation.R")

est_sigpro_subdata <- excess_attenuation(X = est_sigpro_subdata, pb = FALSE, parallel = 10, type = "Dabelsteen", ovlp = 50, wl = 1024)


sigpro_data$sound.files <- paste0(sigpro_data$org.sf, ".wav_", sigpro_data$sound)

sigpro_data$source <- "sigpro"

barulho_data2 <- barulho_data <- sigpro_data
barulho_data$source <- "baRulho"
barulho_data2$source <- "baRulho2"

barulho_data$SNR <- sapply(1:nrow(barulho_data), function(x){
    
    y <- est_sigpro_subdata$signal.to.noise.ratio[est_sigpro_subdata$sound.files == sigpro_data$sound.files[x]]
    
    if (length(y) == 0)
        y <- NA
    
    return(y)
})


barulho_data$blur_ratio <- sapply(1:nrow(barulho_data), function(x){
    
    y <- est_sigpro_subdata$blur.ratio[est_sigpro_subdata$sound.files == sigpro_data$sound.files[x]]
    
    if (length(y) == 0)
        y <- NA
    
    return(y)
})

barulho_data$TSR <- sapply(1:nrow(barulho_data), function(x){
    
    y <- est_sigpro_subdata$tail.to.signal.ratio[est_sigpro_subdata$sound.files == sigpro_data$sound.files[x]]
    
    if (length(y) == 0)
        y <- NA
    
    return(y)
})

barulho_data$k <- sapply(1:nrow(barulho_data), function(x){

    y <- est_sigpro_subdata$k[est_sigpro_subdata$sound.files == sigpro_data$sound.files[x]]

    if (length(y) == 0)
        y <- NA

    
    return(y)
})

barulho_data$excess_attenuation <- sapply(1:nrow(barulho_data), function(x){
    
    y <- est_sigpro_subdata$excess.attenuation[est_sigpro_subdata$sound.files == sigpro_data$sound.files[x]]
    
 if (length(y) == 0)
        y <- NA
    
    return(y)
})
barulho_subdata <- barulho_data[, c("SNR", "TSR", "blur_ratio", "excess_attenuation")]
# barulho_subdata2 <- barulho_data2[, c("SNR", "TSR", "blur_ratio", "excess_attenuation")]

names(barulho_subdata) <- paste(names(barulho_subdata), "bRlho", sep = ".")
# names(barulho_subdata2) <- paste(names(barulho_subdata2), "bRlho2", sep = ".")

comb_data_cols <- cbind(sigpro_data, barulho_subdata)

comb_data_cols$TSR <- as.numeric(comb_data_cols$TSR)
comb_data_cols$SNR <- as.numeric(comb_data_cols$SNR)
comb_data_cols$blur_ratio[comb_data_cols$blur_ratio >= 0.9] <- NA

write.csv(comb_data_cols, "./data/processed/combined_sigpro_barulho.csv", row.names = FALSE)

```

Dotted lines show x = y

```{r compare with plots, results= 'asis', fig.height= 3, eval = TRUE}


comb_data_cols <- read.csv("./data/processed/combined_sigpro_barulho.csv")

for (i in c("TSR", "SNR", "blur_ratio", "excess_attenuation")){

    cat("<br>")
    cat(i)
    cat("<br>")
    # print(paste('Pearson correlation clips:',
    # round(cor(comb_data_cols[comb_data_cols$format == 'Clips',
    # i], comb_data_cols[comb_data_cols$format == 'Clips',
    # paste(i, 'bRlho', sep = '-')], use =
    # 'pairwise.complete.obs'), 2)))

    # clips
    x <- comb_data_cols[comb_data_cols$format ==
    "Clips", i]
    y <- comb_data_cols[comb_data_cols$format == "Clips",
    paste(i, "bRlho", sep = ".")]
    
    cr.clps <- cor.test(x, y, use = "pairwise.complete.obs")
    p <- round(cr.clps$p.value, 3)
    if (p < 0.001)
    p <- "p < 0.001"
    print(paste("Pearson correlation clips: r=", round(cr.clps$estimate,
    2), "; p =", p))
    
    cat("<br>")
    
    # complete recordings    
     x <- comb_data_cols[comb_data_cols$format ==
    "Full recording", i]
    y <- comb_data_cols[comb_data_cols$format == "Full recording",
    paste(i, "bRlho", sep = ".")]
    
    cr.fr <- cor.test(x, y, use = "pairwise.complete.obs")
    p <- round(cr.fr$p.value, 3)
    if (p < 0.001)
    p <- "p < 0.001"
    print(paste("Pearson correlation full recordings: r=", round(cr.fr$estimate,
    2), "; p =", p))

    xy_ranges <- range(c(comb_data_cols[, i], comb_data_cols[, paste(i, "bRlho", sep = ".")]), na.rm = TRUE)
    
    plt <- ggplot(comb_data_cols, aes(x = get(i), y = get(paste(i,
        "bRlho", sep = ".")))) + geom_point(color = viridis(10, alpha = 0.7)[7]) + xlim(xy_ranges) + ylim(xy_ranges) +
        labs(x = paste(i, "SIGPRO"), y = paste(i, "baRulho")) + facet_wrap(~format,
        scales = "free_x") + geom_abline(slope = 1, intercept = 0,
        lty = 3) + theme_classic()

    cat("<br>")

    print(plt)
}
```

Removing 100 m test data
```{r compare with plots no 1oom data, results = 'asis', fig.height= 3, eval = TRUE}


comb_data_cols <- read.csv("./data/processed/combined_sigpro_barulho.csv")
comb_data_cols <- comb_data_cols[comb_data_cols$distance != 100, ]
for (i in c("TSR", "SNR", "blur_ratio", "excess_attenuation")){

    cat("<br>")
    cat(i)
    cat("<br>")
    # print(paste('Pearson correlation clips:',
    # round(cor(comb_data_cols[comb_data_cols$format == 'Clips',
    # i], comb_data_cols[comb_data_cols$format == 'Clips',
    # paste(i, 'bRlho', sep = '-')], use =
    # 'pairwise.complete.obs'), 2)))

    # clips
    x <- comb_data_cols[comb_data_cols$format ==
    "Clips", i]
    y <- comb_data_cols[comb_data_cols$format == "Clips",
    paste(i, "bRlho", sep = ".")]
    
    cr.clps <- cor.test(x, y, use = "pairwise.complete.obs")
    p <- round(cr.clps$p.value, 3)
    if (p < 0.001)
    p <- "p < 0.001"
    print(paste("Pearson correlation clips: r=", round(cr.clps$estimate,
    2), "; p =", p))
    
    cat("<br>")
    
    # complete recordings    
     x <- comb_data_cols[comb_data_cols$format ==
    "Full recording", i]
    y <- comb_data_cols[comb_data_cols$format == "Full recording",
    paste(i, "bRlho", sep = ".")]
    
    cr.fr <- cor.test(x, y, use = "pairwise.complete.obs")
    p <- round(cr.fr$p.value, 3)
    if (p < 0.001)
    p <- "p < 0.001"
    print(paste("Pearson correlation full recordings: r=", round(cr.fr$estimate,
    2), "; p =", p))

    xy_ranges <- range(c(comb_data_cols[, i], comb_data_cols[, paste(i, "bRlho", sep = ".")]), na.rm = TRUE)
    
    plt <- ggplot(comb_data_cols, aes(x = get(i), y = get(paste(i,
        "bRlho", sep = ".")))) + geom_point(color = viridis(10, alpha = 0.7)[7]) + xlim(xy_ranges) + ylim(xy_ranges) +
        labs(x = paste(i, "SIGPRO"), y = paste(i, "baRulho")) + facet_wrap(~format,
        scales = "free_x") + geom_abline(slope = 1, intercept = 0,
        lty = 3) + theme_classic()

    cat("<br>")

    print(plt)
}
```

<div class="alert alert-success">

&nbsp; 

# Takeaways

Similar results between SIGPRO and baRulho
</div>

&nbsp;

<!-- '---' adds a gray vertical line -->

---

&nbsp; 
 
 <!-- add packages used, system details and versions  -->
 
<font size="4">Session information</font>

```{r session info, echo=F}

sessionInfo()

```

