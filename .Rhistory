estimates <- data.frame(pc1 = pc1$coef_table$Estimate, br = br$coef_table$Estimate, ea = ea$coef_table$Estimate, tsr = tsr$coef_table$Estimate)
names(estimates) <- c("Degradation (PC1)", "Blur ratio", "Excess attenuation", "Tail-to-signal ratio")
# make estimates relative to maximum estimate in data
rel_estimates <- data.frame(lapply(estimates, function(x) x/ max(abs(x)) * 0.8))
names(rel_estimates) <- c("Degradation (PC1)", "Blur ratio", "Excess attenuation", "Tail-to-signal ratio")
# corrplot(as.matrix(estimates), method = "ellipse", )
signif <- data.frame(pc1 = pc1$coef_table$`l-95% CI` * pc1$coef_table$`u-95% CI` > 0, br = br$coef_table$`l-95% CI` * br$coef_table$`u-95% CI` > 0, ea = ea$coef_table$`l-95% CI` * ea$coef_table$`u-95% CI` > 0, tsr = tsr$coef_table$`l-95% CI` * tsr$coef_table$`u-95% CI` > 0)
names(signif) <- c("Degradation (PC1)", "Blur ratio", "Excess attenuation", "Tail-to-signal ratio")
estimates <- cbind(rownames(pc1$coef_table), stack(estimates)[, 1], stack(rel_estimates)[, 1], stack(signif))
names(estimates) <- c("predictor", "est", "relavite.est", "sig", "response")
estimates$relavite.est <- ifelse(estimates$sig, estimates$relavite.est, 0)
scale_color_discrete <- function(...) ggplot2::scale_fill_manual(..., values= trace.palette(length(unique(posteriors_by_chain$chain))))
myPalette <- colorRampPalette(adjustcolor(c("#F36c68", "white", "white", "#175493", "#175493"), alpha.f = 0.1))
estimates$response <- factor(estimates$response, levels = rev(c("Degradation (PC1)", "Blur ratio", "Excess attenuation", "Tail-to-signal ratio")))
estimates$predictor <- factor(estimates$predictor, levels = c("habitat structure", "frequency modulation", "amplitude modulation", "frequency", "duration", "frequency:habitat structure", "habitat structure:duration", "habitat structure:amplitude modulation", "habitat structure:frequency modulation"))
ggplot(estimates, aes(x = predictor, y = response, fill = relavite.est)) +
geom_tile() +
coord_equal() +
scale_fill_gradientn(colours = myPalette(100), guide = "none", ) +
geom_text(aes(label = round(est, 2)),
color = "black") +
labs(x = "", y = "") +
theme_classic() +
theme(axis.text.x = element_text(color = "black",
size = 11, angle = 30, vjust = 0.8, hjust = 0.8))
estimates <- data.frame(pc1 = pc1$coef_table$Estimate, br = br$coef_table$Estimate, ea = ea$coef_table$Estimate, tsr = tsr$coef_table$Estimate)
names(estimates) <- c("Degradation (PC1)", "Blur ratio", "Excess attenuation", "Tail-to-signal ratio")
# make estimates relative to maximum estimate in data
rel_estimates <- data.frame(lapply(estimates, function(x) x/ max(abs(x)) * 0.8))
names(rel_estimates) <- c("Degradation (PC1)", "Blur ratio", "Excess attenuation", "Tail-to-signal ratio")
# corrplot(as.matrix(estimates), method = "ellipse", )
signif <- data.frame(pc1 = pc1$coef_table$`l-95% CI` * pc1$coef_table$`u-95% CI` > 0, br = br$coef_table$`l-95% CI` * br$coef_table$`u-95% CI` > 0, ea = ea$coef_table$`l-95% CI` * ea$coef_table$`u-95% CI` > 0, tsr = tsr$coef_table$`l-95% CI` * tsr$coef_table$`u-95% CI` > 0)
names(signif) <- c("Degradation (PC1)", "Blur ratio", "Excess attenuation", "Tail-to-signal ratio")
estimates <- cbind(rownames(pc1$coef_table), stack(estimates)[, 1], stack(rel_estimates)[, 1], stack(signif))
names(estimates) <- c("predictor", "est", "relavite.est", "sig", "response")
estimates$relavite.est <- ifelse(estimates$sig, estimates$relavite.est, 0)
scale_color_discrete <- function(...) ggplot2::scale_fill_manual(..., values= trace.palette(length(unique(posteriors_by_chain$chain))))
myPalette <- colorRampPalette(adjustcolor(c("#F36c68", "white", "#175493", "#175493"), alpha.f = 0.1))
estimates$response <- factor(estimates$response, levels = rev(c("Degradation (PC1)", "Blur ratio", "Excess attenuation", "Tail-to-signal ratio")))
estimates$predictor <- factor(estimates$predictor, levels = c("habitat structure", "frequency modulation", "amplitude modulation", "frequency", "duration", "frequency:habitat structure", "habitat structure:duration", "habitat structure:amplitude modulation", "habitat structure:frequency modulation"))
ggplot(estimates, aes(x = predictor, y = response, fill = relavite.est)) +
geom_tile() +
coord_equal() +
scale_fill_gradientn(colours = myPalette(100), guide = "none", ) +
geom_text(aes(label = round(est, 2)),
color = "black") +
labs(x = "", y = "") +
theme_classic() +
theme(axis.text.x = element_text(color = "black",
size = 11, angle = 30, vjust = 0.8, hjust = 0.8))
ggplot(estimates, aes(x = predictor, y = response, fill = relavite.est)) +
geom_tile() +
coord_equal() +
scale_fill_gradientn(low = "#F36c68", high = "#175493", guide = "none") +
# scale_fill_gradientn(colours = myPalette(100), guide = "none", ) +
geom_text(aes(label = round(est, 2)),
color = "black") +
labs(x = "", y = "") +
theme_classic() +
theme(axis.text.x = element_text(color = "black",
size = 11, angle = 30, vjust = 0.8, hjust = 0.8))
ggplot(estimates, aes(x = predictor, y = response, fill = relavite.est)) +
geom_tile() +
coord_equal() +
scale_fill_gradient(low = "#F36c68", high = "#175493", guide = "none") +
# scale_fill_gradientn(colours = myPalette(100), guide = "none", ) +
geom_text(aes(label = round(est, 2)),
color = "black") +
labs(x = "", y = "") +
theme_classic() +
theme(axis.text.x = element_text(color = "black",
size = 11, angle = 30, vjust = 0.8, hjust = 0.8))
ggplot(estimates, aes(x = predictor, y = response, fill = relavite.est)) +
geom_tile() +
coord_equal() +
scale_fill_gradient2(low = "#F36c68", high = "#175493", guide = "none") +
# scale_fill_gradientn(colours = myPalette(100), guide = "none", ) +
geom_text(aes(label = round(est, 2)),
color = "black") +
labs(x = "", y = "") +
theme_classic() +
theme(axis.text.x = element_text(color = "black",
size = 11, angle = 30, vjust = 0.8, hjust = 0.8))
ggplot(estimates, aes(x = predictor, y = response, fill = relavite.est)) +
geom_tile() +
coord_equal() +
scale_fill_gradient2(low = "#F36c68", high = "#175493", guide = "none") +
scale_fill_gradient2(low = viridis(10)[2], high = viridis(10)[8], guide = "none") +
geom_text(aes(label = round(est, 2)),
color = "black") +
labs(x = "", y = "") +
theme_classic() +
theme(axis.text.x = element_text(color = "black",
size = 11, angle = 30, vjust = 0.8, hjust = 0.8))
ggplot(estimates, aes(x = predictor, y = response, fill = relavite.est)) +
geom_tile() +
coord_equal() +
# scale_fill_gradient2(low = "#F36c68", high = "#175493", guide = "none") +
scale_fill_gradient2(low = viridis(10)[2], high = viridis(10)[8], guide = "none") +
geom_text(aes(label = round(est, 2)),
color = "black") +
labs(x = "", y = "") +
theme_classic() +
theme(axis.text.x = element_text(color = "black",
size = 11, angle = 30, vjust = 0.8, hjust = 0.8))
ggplot(estimates, aes(x = predictor, y = response, fill = relavite.est)) +
geom_tile() +
coord_equal() +
# scale_fill_gradient2(low = "#F36c68", high = "#175493", guide = "none") +
scale_fill_gradient2(low = viridis(10)[1], high = viridis(10)[8], guide = "none") +
geom_text(aes(label = round(est, 2)),
color = "black") +
labs(x = "", y = "") +
theme_classic() +
theme(axis.text.x = element_text(color = "black",
size = 11, angle = 30, vjust = 0.8, hjust = 0.8))
ggplot(estimates, aes(x = predictor, y = response, fill = relavite.est)) +
geom_tile() +
coord_equal() +
# scale_fill_gradient2(low = "#F36c68", high = "#175493", guide = "none") +
scale_fill_gradient2(low = viridis(10)[3], high = viridis(10)[8], guide = "none") +
geom_text(aes(label = round(est, 2)),
color = "black") +
labs(x = "", y = "") +
theme_classic() +
theme(axis.text.x = element_text(color = "black",
size = 11, angle = 30, vjust = 0.8, hjust = 0.8))
ggplot(estimates, aes(x = predictor, y = response, fill = relavite.est)) +
geom_tile() +
coord_equal() +
# scale_fill_gradient2(low = "#F36c68", high = "#175493", guide = "none") +
scale_fill_gradient2(low = viridis(10)[3], high = viridis(10)[7], guide = "none") +
geom_text(aes(label = round(est, 2)),
color = "black") +
labs(x = "", y = "") +
theme_classic() +
theme(axis.text.x = element_text(color = "black",
size = 11, angle = 30, vjust = 0.8, hjust = 0.8))
fit <-  brm(count ~ zAge + zBase * Trt
+ (1|patient) + (1|obs),
data = epilepsy, family = poisson(), chains = 1)
pp_check(fit)  # shows dens_overlay plot by default
pp_check(fit, type = "error_hist", ndraws = 11)
pp_check(fit, type = "scatter_avg", ndraws = 100)
pp_check(fit, type = "stat_2d")
pp_check(fit, type = "rootogram")
pp_check(fit, type = "loo_pit")
## get an overview of all valid types
pp_check(fit, type = "xyz")
## get an overview of all valid types
pp_check(fit, type = "bars")
## get an overview of all valid types
pp_check(fit, type = "bars")
## get an overview of all valid types
pp_check(fit)
## get an overview of all valid types
pp_check(fit)
pp_check(fit)  # shows dens_overlay plot by default
pp_check(fit, type = "error_hist", ndraws = 11)
pp_check(fit, type = "error_hist", ndraws = 12)
pp_check(fit, type = "scatter_avg", ndraws = 100)
pp_check(fit, type = "error_hist", ndraws = 100)
pp_check(fit, type = "scatter_avg", ndraws = 100)
pp_check(fit, type = "stat_2d")
pp_check(fit, type = "scatter_avg", ndraws = 1000)
pp_check(fit, type = "stat_2d")
pp_check(fit, type = "stat_3d")
pp_check(fit, type = "stat_2d")
pp_check(fit)  # shows dens_overlay plot by default
pp_check(fit)  # shows dens_overlay plot by default
pp_check(fit, type = "error_hist", ndraws = 100)
pp_check(fit, ndraws = 100)  # shows dens_overlay plot by default
pp_check(fit, ndraws = 1000)  # shows dens_overlay plot by default
pp_check(fit, type = "error_hist", ndraws = 100)
pc1 <- readRDS("./data/processed/regression_model_pc1.RDS")
pp_check(pc1, ndraws = 1000)  # shows dens_overlay plot by default
pc1
pp_check(pc1, type = "stat_grouped", stat = "mean", group = "habitat.structure")
pp_check(fit, type = "error_hist", ndraws = ndraws)
ndraws <- 10
ndraws <- 10
pp_check(pc1, ndraws = ndraws)  # shows dens_overlay plot by default
pp_check(pc1, type = "stat_grouped", stat = "mean", group = "habitat.structure", ndraws = ndraws)
ndraws <- 100
pp_check(pc1, ndraws = ndraws)  # shows dens_overlay plot by default
pp_check(pc1, type = "stat_grouped", stat = "mean", group = "habitat.structure", ndraws = ndraws)
pp_check(pc1, ndraws = ndraws, group = "habitat.structure")  # shows dens_overlay plot by default
pp_check(fit, type = "stat_2d", ndraws = ndraws)
pp_check(fit, type = "rootogram", ndraws = ndraws)
pp_check(fit, type = "loo_pit", ndraws = ndraws)
pp_check(pc1, ndraws = ndraws)  # shows dens_overlay plot by default
pp_check(pc1, type = "stat_grouped", stat = "mean", group = "habitat.structure", ndraws = ndraws)
pp_check(pc1, type = "error_hist", ndraws = ndraws)
pp_check(pc1, type = "scatter_avg", ndraws = ndraws)
pp_check(pc1, type = "stat_2d", ndraws = ndraws)
pp_check(pc1, type = "rootogram", ndraws = ndraws)
pp_check(pc1, type = "loo_pit", ndraws = ndraws)
pp_check(pc1, type = "loo_pit_qq", ndraws = ndraws)
pp_check(pc1, type = "ribbon_grouped", x = "frequency", group = "habitat.structure")
pc1
pp_check(pc1, type = "ribbon_grouped", x = "frequency", resp = "pc1", group = "habitat.structure", ndraws = ndraws)
pp_check(pc1, type = "ribbon_grouped", x = "frequency", resp = "pc1", ndraws = ndraws)
pp_check(pc1, type = "scatter_grouped", x = "frequency", resp = "pc1", group = "habitat.structure", ndraws = ndraws)
pp_check(pc1, type = "scatter_avg_grouped", x = "frequency", resp = "pc1", group = "habitat.structure", ndraws = ndraws)
pp_check(pc1, type = "scatter_avg_grouped", x = "frequency", resp = "pc1", group = "habitat.structure", ndraws = ndraws)
pp_check(pc1, type = "scatter_avg_grouped", x = "frequency",  group = "habitat.structure", ndraws = ndraws)
pp_check(pc1, type = "scatter_avg_grouped", x = "frequency", group = "habitat.structure", ndraws = ndraws)
pp_check(pc1, type = "loo_pit_qq_grouped", ndraws = ndraws, group = "habitat.structure")
pp_check(pc1, type = "loo_pit_qq", ndraws = ndraws)
pp_check(pc1, type = "scatter_avg_grouped", x = "frequency", group = "habitat.structure", ndraws = ndraws)
## get an overview of all valid types
pp_check(fit)
## get an overview of all valid types
pp_check(pc1, ndraws = ndraws)
pairs(pc1, pars = "b",
pairs(pc1, pars = "b",
off_diag_args =  # arguments of the scatterplots
list(size = 0.5,  # point size
alpha = 0.25)   )
pairs(pc1, variable = "b",
off_diag_args =  # arguments of the scatterplots
list(size = 0.5,  # point size
alpha = 0.25)   )
pairs(pc1,
off_diag_args =  # arguments of the scatterplots
list(size = 0.5,  # point size
alpha = 0.25)   )
ndraws <- 100
pp_check(pc1, ndraws = ndraws)  # shows dens_overlay plot by default
pp_check(pc1, type = "stat_grouped", stat = "mean", group = "habitat.structure", ndraws = ndraws)
pp_check(pc1, type = "scatter_avg", ndraws = ndraws)
pp_check(pc1, type = "stat_2d", ndraws = ndraws)
pp_check(pc1, type = "loo_pit_qq", ndraws = ndraws)
pp_check(pc1, type = "loo_pit_qq", ndraws = ndraws)
pp_check(pc1, type = "loo_pit_qq", ndraws = ndraws)
pp_check(pc1, type = "scatter_avg_grouped", x = "frequency", group = "habitat.structure", ndraws = ndraws)
pp_check(pc1, type = "loo_pit_qq", ndraws = ndraws)
pp_check(pc1, type = "scatter_avg_grouped", x = "frequency", group = "habitat.structure", ndraws = ndraws)
pp_check(pc1, type = "scatter_avg", ndraws = ndraws)
pp_check(pc1, type = "stat_grouped", stat = "mean", group = "habitat.structure", ndraws = ndraws)
pp_check(pc1, ndraws = ndraws)  # shows dens_overlay plot by default
pp_check(pc1, ndraws = ndraws, group = "habitat.structure")  # shows dens_overlay plot by default
pp_check(pc1, type = "stat_gro3uped", stat = "mean", group = "habitat.structure", ndraws = ndraws)
pp_check(pc1, ndraws = ndraws,  type = 'dens_overlay_grouped', group = "habitat.structure")  # shows dens_overlay plot by default
pp_check(pc1, type = "stat_grouped", stat = "mean", group = "habitat.structure", ndraws = ndraws)
pp_check(pc1, type = "stat_2d", ndraws = ndraws)
pp_check(pc1, type = "stat_freqpoly", ndraws = ndraws)
pp_check(pc1, type = "stat_2d", ndraws = ndraws)
pp_check(pc1, type = "stat_2d", ndraws = ndraws)
pp_check(pc1, type = "loo_pit_qq", ndraws = ndraws)
pp_check(pc1, type = "scatter_avg_grouped", x = "frequency", group = "habitat.structure", ndraws = ndraws)
fit <- readRDS("./data/processed/regression_model_pc1.RDS")
pp_check(fit, ndraws = ndraws,  type = 'dens_overlay_grouped', group = "habitat.structure")  # shows dens_overlay plot by default
pp_check(fit, type = "stat_grouped", stat = "mean", group = "habitat.structure", ndraws = ndraws)
pp_check(fit, type = "scatter_avg_grouped", x = "frequency", group = "habitat.structure", ndraws = ndraws)
pp_check(fit, type = "scatter_avg_grouped", x = "frequency", group = "habitat.structure", ndraws = ndraws)
pp_check(fit, type = "scatter_avg_grouped", group = "habitat.structure", ndraws = ndraws)
pp_check(fit, type = "stat_2d", ndraws = ndraws)
ppc_dens <- pp_check(fit, ndraws = ndraws,  type = 'dens_overlay_grouped', group = "habitat.structure")  # shows dens_overlay plot by default
pp_mean <- pp_check(fit, type = "stat_grouped", stat = "mean", group = "habitat.structure", ndraws = ndraws)
pp_scat <- pp_check(fit, type = "scatter_avg_grouped", group = "habitat.structure", ndraws = ndraws)
pp_stat2 <- pp_check(fit, type = "stat_2d", ndraws = ndraws)
pp_mean <- pp_check(fit, type = "stat_grouped", stat = "mean", group = "habitat.structure", ndraws = ndraws)
pp_loo <- pp_check(fit, type = "loo_pit_qq", ndraws = ndraws)
pp_mean
pp_stat2
ppc_dens <- pp_check(fit, ndraws = ndraws,  type = 'dens_overlay_grouped', group = "habitat.structure") + scale_color_viridis()  # shows dens_overlay plot by default
ppc_dens
ppc_dens <- pp_check(fit, ndraws = ndraws,  type = 'dens_overlay_grouped', group = "habitat.structure") + scale_color_viridis_d(begin = 0.1, end = 0.8)  # shows dens_overlay plot by default
ppc_dens
ppc_dens <- pp_check(fit, ndraws = ndraws,  type = 'dens_overlay_grouped', group = "habitat.structure") + scale_color_viridis_d(begin = 0.1, end = 0.8,  alpha = 0.6)  # shows dens_overlay plot by default
ppc_dens
ppc_dens <- pp_check(fit, ndraws = ndraws,  type = 'dens_overlay_grouped', group = "habitat.structure") + scale_color_viridis_d(begin = 0.1, end = 0.8,  alpha = 0.5)  # shows dens_overlay plot by default
ppc_dens
ppc_dens <- pp_check(fit, ndraws = ndraws,  type = 'dens_overlay_grouped', group = "habitat.structure") + scale_color_viridis_d(begin = 0.1, end = 0.8,  alpha = 0.5)  # shows dens_overlay plot by default
pp_mean <- pp_check(fit, type = "stat_grouped", stat = "mean", group = "habitat.structure", ndraws = ndraws) + scale_color_viridis_d(begin = 0.1, end = 0.8,  alpha = 0.5)
pp_scat <- pp_check(fit, type = "scatter_avg_grouped", group = "habitat.structure", ndraws = ndraws)+ scale_color_viridis_d(begin = 0.1, end = 0.8,  alpha = 0.5)
pp_stat2 <- pp_check(fit, type = "stat_2d", ndraws = ndraws) + scale_color_viridis_d(begin = 0.1, end = 0.8,  alpha = 0.5)
pp_loo <- pp_check(fit, type = "loo_pit_qq", ndraws = ndraws) + scale_color_viridis_d(begin = 0.1, end = 0.8,  alpha = 0.5)
list(ppc_dens, pp_mean, pp_scat, pp_stat2, pp_loo)
ppc_dens <- pp_check(fit, ndraws = ndraws,  type = 'dens_overlay_grouped', group = "habitat.structure")  # shows dens_overlay plot by default
pp_mean <- pp_check(fit, type = "stat_grouped", stat = "mean", group = "habitat.structure", ndraws = ndraws)
pp_scat <- pp_check(fit, type = "scatter_avg_grouped", group = "habitat.structure", ndraws = ndraws)
pp_stat2 <- pp_check(fit, type = "stat_2d", ndraws = ndraws)
pp_loo <- pp_check(fit, type = "loo_pit_qq", ndraws = ndraws)
plot_l <- list(ppc_dens, pp_mean, pp_scat, pp_stat2, pp_loo)
plot_l <- lapply(plot_l, function(x) x  + scale_color_viridis_d(begin = 0.1, end = 0.8,  alpha = 0.5) )
plot_grid(plotlist = plot_l, ncol = 2)
plot_l <- list(ppc_dens, pp_mean, pp_stat2, pp_scat, pp_loo)
plot_l <- lapply(plot_l, function(x) x  + scale_color_viridis_d(begin = 0.1, end = 0.8,  alpha = 0.5))
plot_l <- lapply(plot_l, function(x) x  + scale_color_viridis_d(begin = 0.1, end = 0.8,  alpha = 0.5) + scale_fill_viridis_d(begin = 0.1, end = 0.8,  alpha = 0.5))
plot_grid(plotlist = plot_l, ncol = 2)
pp_error <- pp_check(fit, type = "stat_2d2", ndraws = ndraws)
pp_error <- pp_check(fit, type = "error_hist", ndraws = ndraws)
pp_error
pp_error <- pp_check(fit, type = "error_hist", ndraws = 10)
pp_error
pp_error <- pp_check(fit, type = "error_binned", ndraws = ndraws)
pp_error
pp_error <- pp_check(fit, type = "error_scatter", ndraws = ndraws)
pp_error
pp_error <- pp_check(fit, type = "error_scatter_avg", ndraws = ndraws)
pp_error
pp_error <- pp_check(fit, type = "error_scatter_avg_grouped", ndraws = ndraws, group = "habitat.structure")
pp_error
plot_l <- list(ppc_dens, pp_mean, pp_error, pp_stat2, pp_scat, pp_loo)
plot_l <- lapply(plot_l, function(x) x  + scale_color_viridis_d(begin = 0.1, end = 0.8,  alpha = 0.5) + scale_fill_viridis_d(begin = 0.1, end = 0.8,  alpha = 0.5))
plot_grid(plotlist = plot_l, ncol = 2)
plot_l <- list(ppc_dens, pp_mean, pp_stat2, pp_scat, pp_error, pp_loo)
plot_l <- lapply(plot_l, function(x) x  + scale_color_viridis_d(begin = 0.1, end = 0.8,  alpha = 0.5) + scale_fill_viridis_d(begin = 0.1, end = 0.8,  alpha = 0.5))
plot_grid(plotlist = plot_l, ncol = 2)
pp_mean
pp_scat
ppc_dens
pp_mean
plot_grid(plotlist = plot_l, ncol = 2)
plot_grid(plotlist = plot_l, ncol = 2, byrow = TRUE)
plot_grid(plotlist = plot_l, ncol = 2, byrow = FALSE)
pp_mean
plot_l <- list(ppc_dens, pp_mean,pp_scat, pp_error,  pp_stat2, pp_loo)
plot_l <- lapply(plot_l, function(x) x  + scale_color_viridis_d(begin = 0.1, end = 0.8,  alpha = 0.5) + scale_fill_viridis_d(begin = 0.1, end = 0.8,  alpha = 0.5))
plot_grid(plotlist = plot_l, ncol = 2)
pp_error <- pp_check(fit, type = "error_scatter_avg_grouped", ndraws = ndraws / 4, group = "habitat.structure")
pp_error
pp_error <- pp_check(fit, type = "error_scatter_avg_grouped", ndraws = ndraws / 10, group = "habitat.structure")
pp_error
print(plot_grid(plotlist = plot_l, ncol = 2))
model_list <- c(pc1 = "./data/processed/regression_model_pc1.RDS",
blur_ratio = "./data/processed/regression_model_blur_ratio.RDS",
excess_attenuation = ,
"./data/processed/regression_model_excess_attenuation.RDS",
tail_to_signal_ratio = "./data/processed/regression_model_tail_to_signal.RDS")
model_list <- c(pc1 = "./data/processed/regression_model_pc1.RDS",
blur_ratio = "./data/processed/regression_model_blur_ratio.RDS",
excess_attenuation = ,
"./data/processed/regression_model_excess_attenuation.RDS",
tail_to_signal_ratio = "./data/processed/regression_model_tail_to_signal.RDS")
model_list <- c(pc1 = "./data/processed/regression_model_pc1.RDS",
blur_ratio = "./data/processed/regression_model_blur_ratio.RDS",
excess_attenuation = ,
"./data/processed/regression_model_excess_attenuation.RDS",
tail_to_signal_ratio = "./data/processed/regression_model_tail_to_signal.RDS")
model_list <- c(pc1 = "./data/processed/regression_model_pc1.RDS",
blur_ratio = "./data/processed/regression_model_blur_ratio.RDS",
excess_attenuation = ,
"./data/processed/regression_model_excess_attenuation.RDS",
tail_to_signal_ratio = "./data/processed/regression_model_tail_to_signal.RDS")
model_list <- c(pc1 = "./data/processed/regression_model_pc1.RDS",
blur_ratio = "./data/processed/regression_model_blur_ratio.RDS",
excess_attenuation =                 "./data/processed/regression_model_excess_attenuation.RDS",
tail_to_signal_ratio = "./data/processed/regression_model_tail_to_signal.RDS")
seq_len(length(model_list))
model_list <- c(
pc1 = "./data/processed/regression_model_pc1.RDS",
blur_ratio = "./data/processed/regression_model_blur_ratio.RDS",
excess_attenuation =                 "./data/processed/regression_model_excess_attenuation.RDS",
tail_to_signal_ratio = "./data/processed/regression_model_tail_to_signal.RDS"
)
ndraws <- 20
for (i in seq_len(length(model_list))) {
cat('\n\n## ', names(model_list)[i], '\n\n')
fit <- readRDS(model_list[[i]])
ppc_dens <-
pp_check(fit,
ndraws = ndraws,
type = 'dens_overlay_grouped',
group = "habitat.structure")  # shows dens_overlay plot by default
pp_mean <-
pp_check(
fit,
type = "stat_grouped",
stat = "mean",
group = "habitat.structure",
ndraws = ndraws
)
pp_scat <-
pp_check(fit,
type = "scatter_avg_grouped",
group = "habitat.structure",
ndraws = ndraws)
pp_stat2 <- pp_check(fit, type = "stat_2d", ndraws = ndraws)
pp_loo <- pp_check(fit, type = "loo_pit_qq", ndraws = ndraws)
pp_error <-
pp_check(fit,
type = "error_scatter_avg_grouped",
ndraws = ndraws,
group = "habitat.structure")
plot_l <-
list(ppc_dens, pp_mean, pp_scat, pp_error,  pp_stat2, pp_loo)
plot_l <-
lapply(plot_l, function(x)
x  + scale_color_viridis_d(
begin = 0.1,
end = 0.8,
alpha = 0.5
) + scale_fill_viridis_d(
begin = 0.1,
end = 0.8,
alpha = 0.5
)) + theme_classic()
print(plot_grid(plotlist = plot_l, ncol = 2))
}
i
cat('\n\n## ', names(model_list)[i], '\n\n')
fit <- readRDS(model_list[[i]])
ppc_dens <-
pp_check(fit,
ndraws = ndraws,
type = 'dens_overlay_grouped',
group = "habitat.structure")  # shows dens_overlay plot by default
pp_mean <-
pp_check(
fit,
type = "stat_grouped",
stat = "mean",
group = "habitat.structure",
ndraws = ndraws
)
pp_scat <-
pp_check(fit,
type = "scatter_avg_grouped",
group = "habitat.structure",
ndraws = ndraws)
pp_stat2 <- pp_check(fit, type = "stat_2d", ndraws = ndraws)
pp_loo <- pp_check(fit, type = "loo_pit_qq", ndraws = ndraws)
pp_error <-
pp_check(fit,
type = "error_scatter_avg_grouped",
ndraws = ndraws,
group = "habitat.structure")
plot_l <-
list(ppc_dens, pp_mean, pp_scat, pp_error,  pp_stat2, pp_loo)
plot_l <-
lapply(plot_l, function(x)
x  + scale_color_viridis_d(
begin = 0.1,
end = 0.8,
alpha = 0.5
) + scale_fill_viridis_d(
begin = 0.1,
end = 0.8,
alpha = 0.5
)) + theme_classic()
print(plot_grid(plotlist = plot_l, ncol = 2))
plot_grid(plotlist = plot_l, ncol = 2)
plot_l
plot_l <-
list(ppc_dens, pp_mean, pp_scat, pp_error,  pp_stat2, pp_loo)
plot_l
plot_l <-
lapply(plot_l, function(x)
x  + scale_color_viridis_d(
begin = 0.1,
end = 0.8,
alpha = 0.5
) + scale_fill_viridis_d(
begin = 0.1,
end = 0.8,
alpha = 0.5
) + theme_classic())
print(plot_grid(plotlist = plot_l, ncol = 2))
model_list <- c(
pc1 = "./data/processed/regression_model_pc1.RDS",
blur_ratio = "./data/processed/regression_model_blur_ratio.RDS",
excess_attenuation =                 "./data/processed/regression_model_excess_attenuation.RDS",
tail_to_signal_ratio = "./data/processed/regression_model_tail_to_signal.RDS"
)
ndraws <- 20
for (i in seq_len(length(model_list))) {
cat('\n\n## ', names(model_list)[i], '\n\n')
fit <- readRDS(model_list[[i]])
ppc_dens <-
pp_check(fit,
ndraws = ndraws,
type = 'dens_overlay_grouped',
group = "habitat.structure")  # shows dens_overlay plot by default
pp_mean <-
pp_check(
fit,
type = "stat_grouped",
stat = "mean",
group = "habitat.structure",
ndraws = ndraws
)
pp_scat <-
pp_check(fit,
type = "scatter_avg_grouped",
group = "habitat.structure",
ndraws = ndraws)
pp_stat2 <- pp_check(fit, type = "stat_2d", ndraws = ndraws)
pp_loo <- pp_check(fit, type = "loo_pit_qq", ndraws = ndraws)
pp_error <-
pp_check(fit,
type = "error_scatter_avg_grouped",
ndraws = ndraws,
group = "habitat.structure")
plot_l <-
list(ppc_dens, pp_mean, pp_scat, pp_error,  pp_stat2, pp_loo)
plot_l <-
lapply(plot_l, function(x)
x  + scale_color_viridis_d(
begin = 0.1,
end = 0.8,
alpha = 0.5
) + scale_fill_viridis_d(
begin = 0.1,
end = 0.8,
alpha = 0.5
) + theme_classic())
print(plot_grid(plotlist = plot_l, ncol = 2))
}
pp_loo <- pp_check(fit, type = "loo_pit_qq", ndraws = ndraws)
