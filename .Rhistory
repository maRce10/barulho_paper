# frequency label
screen(15)
par(mar = c(0, 0, 0, 0), new = TRUE)
plot(
1,
frame.plot = FALSE,
type = "n",
yaxt = "n",
xaxt = "n"
)
text(
x = 0.9,
y = 1,
"Frequency (kHz)",
srt = 90,
cex = 1.6
)
# time label
screen(16)
par(mar = c(0, 0, 0, 0), new = TRUE)
plot(
1,
frame.plot = FALSE,
type = "n",
yaxt = "n",
xaxt = "n"
)
text(x = 1,
y = 0.75,
"Time (s)",
cex = 1.6)
for (i in seq_along(files)) {
# print(i)
screen(i)
par(mar = c(0, 0, 0, 0))
warbleR:::spectro_wrblr_int2(
wave = readWave(
file.path(path_to_files, files[i]),
from = min(realigned_tests$start[realigned_tests$sound.files == files[i]]) - 1.2,
to = min(realigned_tests$start[realigned_tests$sound.files == files[i]]) + 4,
units = "seconds"
),
collevels = colls,
ovlp = ovlp,
wl = wl,
flim = c(0.1, 10.6),
palette = mako,
axisX = FALSE,
axisY = FALSE,
grid = FALSE
)
# add frequency axis
if (grepl("open", realigned_tests$sound.files[realigned_tests$sound.files == files[i]][1]))
axis(2, at = c(seq(2, 10, 2)))
# add time axis
if (grepl("100m", realigned_tests$sound.files[realigned_tests$sound.files == files[i]])[1])
axis(1)
lns <-
c(
realigned_tests$start[realigned_tests$sound.files == files[i]] - min(realigned_tests$start[realigned_tests$sound.files == files[i]]),
realigned_tests$end[realigned_tests$sound.files == files[i]] - min(realigned_tests$start[realigned_tests$sound.files == files[i]])
) + 1.2
lns <- c(lns, min(lns) - 0.1, min(lns) - 1.05)
abline(
v = lns,
col = "white",
lty = 3,
lwd = 1.2
)
abline(
v = lns,
col = "white",
lty = 3,
lwd = 1.2
)
}
vlabs <- paste(c(10, 30, 65, 100), "m")
par(mar = c(0, 0, 0, 0),
bg = lab_bg,
new = TRUE)
# add vertical labels
for (i in 9:12) {
screen(i)
# par(mar = c(0, 0, 0, 0))
par(mar = c(0, 0, 0, 0),
bg = lab_bg,
new = TRUE)
plot(
1,
frame.plot = FALSE,
type = "n",
yaxt = "n",
xaxt = "n"
)
text(
x = 1,
y = 1,
vlabs[i - 8],
# srt = 270,
cex = 1.6,
col = "white",
font = 2
)
box()
}
hlabs <- c("Open habitat", "Closed habitat")
for (i in 13:14) {
screen(i)
par(mar = c(0, 0, 0, 0),
bg = lab_bg,
new = TRUE)
plot(
1,
frame.plot = FALSE,
type = "n",
yaxt = "n",
xaxt = "n"
)
text(
x = 1,
y = 1,
hlabs[i - 12],
font = 2,
cex = 1.6,
col = "white"
)
box()
}
dev.off()
}
# Chunk 1: setup style
# s to customize chunk outputs
knitr::opts_chunk$set(
class.source = "numberLines lineAnchors", # for code line numbers
tidy.opts = list(width.cutoff = 65),
tidy = TRUE,
message = FALSE,
warning = FALSE
)
# set working directory as one directory above
knitr::opts_knit$set(root.dir = "..")
# Chunk 2: load packages and setup style
# github packages must include user name ("user/package")
# knitr is require for creating html/pdf/word reports
# kableExtra is used to print pretty formatted tables
# formatR is used for soft-wrapping code
# klippy is used for adding a copy button to each code block
pkgs <- c("remotes", "kableExtra", "knitr", "formatR", "rprojroot", github = "maRce10/warbleR", github = "maRce10/ohun", github = "ropensci/baRulho", "tidyr", "viridis", "ggplot2")
source("~/Dropbox/R_package_testing/sketchy/R/load_packages.R")
# source("https://raw.githubusercontent.com/maRce10/sketchy/main/R/load_packages.R")
# install/ load packages
load_packages(packages =pkgs)
path_to_files <- "./data/raw/tlalpan_data"
master_annotations <- read.csv(file.path(path_to_files, "master_annotations.csv"))
# Chunk 5
set.seed(123)
synth_data <-
synth_sounds(
replicates = 3, # number of replicates for each unique combination of varying features
frequencies = seq(0.5, 10, length.out = 20),
durations = c(0.2, 0.1),
am = TRUE, # amplitude modulation
fm = TRUE, # frequency modulation
sig2 = 0.8, # frequency modulation parameter
shuffle = TRUE # randomize the position of sounds
)
library(baRulho)
# Chunk 1: setup style
# s to customize chunk outputs
knitr::opts_chunk$set(
class.source = "numberLines lineAnchors", # for code line numbers
tidy.opts = list(width.cutoff = 65),
tidy = TRUE,
message = FALSE,
warning = FALSE
)
# set working directory as one directory above
knitr::opts_knit$set(root.dir = "..")
# Chunk 2: load packages and setup style
# github packages must include user name ("user/package")
# knitr is require for creating html/pdf/word reports
# kableExtra is used to print pretty formatted tables
# formatR is used for soft-wrapping code
# klippy is used for adding a copy button to each code block
pkgs <- c("remotes", "kableExtra", "knitr", "formatR", "rprojroot", github = "maRce10/warbleR", github = "maRce10/ohun", github = "ropensci/baRulho", "tidyr", "viridis", "ggplot2")
source("~/Dropbox/R_package_testing/sketchy/R/load_packages.R")
# source("https://raw.githubusercontent.com/maRce10/sketchy/main/R/load_packages.R")
# install/ load packages
load_packages(packages =pkgs)
path_to_files <- "./data/raw/tlalpan_data"
master_annotations <- read.csv(file.path(path_to_files, "master_annotations.csv"))
# Chunk 5
set.seed(123)
synth_data <-
synth_sounds(
replicates = 3, # number of replicates for each unique combination of varying features
frequencies = seq(0.5, 10, length.out = 20),
durations = c(0.2, 0.1),
am = TRUE, # amplitude modulation
fm = TRUE, # frequency modulation
sig2 = 0.8, # frequency modulation parameter
shuffle = TRUE # randomize the position of sounds
)
library(baRulho)
library(warbleR)
library(ggplot2)
library(cowplot)
library(grid)
# Chunk 1: setup style
# s to customize chunk outputs
knitr::opts_chunk$set(
class.source = "numberLines lineAnchors", # for code line numbers
tidy.opts = list(width.cutoff = 65),
tidy = TRUE,
message = FALSE,
warning = FALSE
)
# set working directory as one directory above
knitr::opts_knit$set(root.dir = "..")
# Chunk 2: load packages and setup style
# github packages must include user name ("user/package")
# knitr is require for creating html/pdf/word reports
# kableExtra is used to print pretty formatted tables
# formatR is used for soft-wrapping code
# klippy is used for adding a copy button to each code block
pkgs <- c("remotes", "kableExtra", "knitr", "formatR", "rprojroot", github = "maRce10/warbleR", github = "maRce10/ohun", github = "ropensci/baRulho", "tidyr", "viridis", "ggplot2")
source("~/Dropbox/R_package_testing/sketchy/R/load_packages.R")
# source("https://raw.githubusercontent.com/maRce10/sketchy/main/R/load_packages.R")
# install/ load packages
load_packages(packages =pkgs)
path_to_files <- "./data/raw/tlalpan_data"
master_annotations <- read.csv(file.path(path_to_files, "master_annotations.csv"))
# Chunk 5
set.seed(123)
synth_data <-
synth_sounds(
replicates = 3, # number of replicates for each unique combination of varying features
frequencies = seq(0.5, 10, length.out = 20),
durations = c(0.2, 0.1),
am = TRUE, # amplitude modulation
fm = TRUE, # frequency modulation
sig2 = 0.8, # frequency modulation parameter
shuffle = TRUE # randomize the position of sounds
)
devtools::install("~/Dropbox/R_package_testing/baRulho/")
# Chunk 1: setup style
# s to customize chunk outputs
knitr::opts_chunk$set(
class.source = "numberLines lineAnchors", # for code line numbers
tidy.opts = list(width.cutoff = 65),
tidy = TRUE,
message = FALSE,
warning = FALSE
)
# set working directory as one directory above
knitr::opts_knit$set(root.dir = "..")
# Chunk 2: load packages and setup style
# github packages must include user name ("user/package")
# knitr is require for creating html/pdf/word reports
# kableExtra is used to print pretty formatted tables
# formatR is used for soft-wrapping code
# klippy is used for adding a copy button to each code block
pkgs <- c("remotes", "kableExtra", "knitr", "formatR", "rprojroot", github = "maRce10/warbleR", github = "maRce10/ohun", github = "ropensci/baRulho", "tidyr", "viridis", "ggplot2")
source("~/Dropbox/R_package_testing/sketchy/R/load_packages.R")
# source("https://raw.githubusercontent.com/maRce10/sketchy/main/R/load_packages.R")
# install/ load packages
load_packages(packages =pkgs)
path_to_files <- "./data/raw/tlalpan_data"
master_annotations <- read.csv(file.path(path_to_files, "master_annotations.csv"))
# Chunk 5
set.seed(123)
synth_data <-
synth_sounds(
replicates = 3, # number of replicates for each unique combination of varying features
frequencies = seq(0.5, 10, length.out = 20),
durations = c(0.2, 0.1),
am = TRUE, # amplitude modulation
fm = TRUE, # frequency modulation
sig2 = 0.8, # frequency modulation parameter
shuffle = TRUE # randomize the position of sounds
)
# Chunk 1: setup style
# s to customize chunk outputs
knitr::opts_chunk$set(
class.source = "numberLines lineAnchors", # for code line numbers
tidy.opts = list(width.cutoff = 65),
tidy = TRUE,
message = FALSE,
warning = FALSE
)
# set working directory as one directory above
knitr::opts_knit$set(root.dir = "..")
# Chunk 2: load packages and setup style
# github packages must include user name ("user/package")
# knitr is require for creating html/pdf/word reports
# kableExtra is used to print pretty formatted tables
# formatR is used for soft-wrapping code
# klippy is used for adding a copy button to each code block
pkgs <- c("remotes", "kableExtra", "knitr", "formatR", "rprojroot", github = "maRce10/warbleR", github = "maRce10/ohun", github = "ropensci/baRulho", "tidyr", "viridis", "ggplot2")
source("~/Dropbox/R_package_testing/sketchy/R/load_packages.R")
# source("https://raw.githubusercontent.com/maRce10/sketchy/main/R/load_packages.R")
# install/ load packages
load_packages(packages =pkgs)
path_to_files <- "./data/raw/tlalpan_data"
master_annotations <- read.csv(file.path(path_to_files, "master_annotations.csv"))
# Chunk 5
set.seed(123)
synth_data <-
synth_sounds(
replicates = 3, # number of replicates for each unique combination of varying features
frequencies = seq(0.5, 10, length.out = 20),
durations = c(0.2, 0.1),
am = TRUE, # amplitude modulation
fm = TRUE, # frequency modulation
sig2 = 0.8, # frequency modulation parameter
shuffle = TRUE # randomize the position of sounds
)
synth_data <-
synth_sounds(
replicates = 3, # number of replicates for each unique combination of varying features
frequencies = seq(0.5, 10, length.out = 20),
durations = c(0.2, 0.1),
am = TRUE, # amplitude modulation
fm = TRUE, # frequency modulation
sig2 = 0.8, # frequency modulation parameter
shuffle = TRUE # randomize the position of sounds
)
View(synth_sounds)
View(synth_sounds)
rm(synth_sounds)
# Chunk 1: setup style
# s to customize chunk outputs
knitr::opts_chunk$set(
class.source = "numberLines lineAnchors", # for code line numbers
tidy.opts = list(width.cutoff = 65),
tidy = TRUE,
message = FALSE,
warning = FALSE
)
# set working directory as one directory above
knitr::opts_knit$set(root.dir = "..")
# Chunk 2: load packages and setup style
# github packages must include user name ("user/package")
# knitr is require for creating html/pdf/word reports
# kableExtra is used to print pretty formatted tables
# formatR is used for soft-wrapping code
# klippy is used for adding a copy button to each code block
pkgs <- c("remotes", "kableExtra", "knitr", "formatR", "rprojroot", github = "maRce10/warbleR", github = "maRce10/ohun", github = "ropensci/baRulho", "tidyr", "viridis", "ggplot2")
source("~/Dropbox/R_package_testing/sketchy/R/load_packages.R")
# source("https://raw.githubusercontent.com/maRce10/sketchy/main/R/load_packages.R")
# install/ load packages
load_packages(packages =pkgs)
path_to_files <- "./data/raw/tlalpan_data"
master_annotations <- read.csv(file.path(path_to_files, "master_annotations.csv"))
# Chunk 5
set.seed(123)
synth_data <-
synth_sounds(
replicates = 3, # number of replicates for each unique combination of varying features
frequencies = seq(0.5, 10, length.out = 20),
durations = c(0.2, 0.1),
am = TRUE, # amplitude modulation
fm = TRUE, # frequency modulation
sig2 = 0.8, # frequency modulation parameter
shuffle = TRUE # randomize the position of sounds
)
# Chunk 7
synth_data <- synth_data[synth_data$sound.id %in% master_annotations$sound.id, ]
mtch <- c(na.omit(match(master_annotations$sound.id, synth_data$sound.id)))
synth_data <- synth_data[mtch, ]
# cbind(c(1, synth_data$sound.id[1:5]), master_annotations$sound.id[1:6])
kbl <- kableExtra::kable(head(synth_data, 10), align = "c", row.names = F,  format = "html", escape = F)
if(knitr::is_html_output(excludes = "markdown"))
kbl <- kableExtra::kable_styling(kbl, bootstrap_options = "striped", font_size = 14)
# kbl <- kableExtra::scroll_box(kbl, width = "800px", height = "300px")
if (knitr::is_html_output(excludes = "markdown"))
print(kbl) else
kableExtra::landscape(knitr::kable(head(synth_data, 10), row.names = FALSE))
# Chunk 10
kbl <- kableExtra::kable(head(master_annotations), align = "c", row.names = F,  format = "html", escape = F)
kbl <- kableExtra::kable_styling(kbl, bootstrap_options = "striped", font_size = 14)
if (knitr::is_html_output(excludes = "markdown"))
print(kbl) else
kableExtra::landscape(knitr::kable(head(master_annotations, 10), row.names = FALSE))
# Chunk 13
# directory path where supplementary files have been saved
options(sound.files.path = path_to_files, mc.cores = 2)
markers_in_tests <-
find_markers(X = master_annotations)
rm( find_markers)
# Chunk 1: setup style
# s to customize chunk outputs
knitr::opts_chunk$set(
class.source = "numberLines lineAnchors", # for code line numbers
tidy.opts = list(width.cutoff = 65),
tidy = TRUE,
message = FALSE,
warning = FALSE
)
# set working directory as one directory above
knitr::opts_knit$set(root.dir = "..")
# Chunk 2: load packages and setup style
# github packages must include user name ("user/package")
# knitr is require for creating html/pdf/word reports
# kableExtra is used to print pretty formatted tables
# formatR is used for soft-wrapping code
# klippy is used for adding a copy button to each code block
pkgs <- c("remotes", "kableExtra", "knitr", "formatR", "rprojroot", github = "maRce10/warbleR", github = "maRce10/ohun", github = "ropensci/baRulho", "tidyr", "viridis", "ggplot2")
source("~/Dropbox/R_package_testing/sketchy/R/load_packages.R")
# source("https://raw.githubusercontent.com/maRce10/sketchy/main/R/load_packages.R")
# install/ load packages
load_packages(packages =pkgs)
path_to_files <- "./data/raw/tlalpan_data"
master_annotations <- read.csv(file.path(path_to_files, "master_annotations.csv"))
# Chunk 5
set.seed(123)
synth_data <-
synth_sounds(
replicates = 3, # number of replicates for each unique combination of varying features
frequencies = seq(0.5, 10, length.out = 20),
durations = c(0.2, 0.1),
am = TRUE, # amplitude modulation
fm = TRUE, # frequency modulation
sig2 = 0.8, # frequency modulation parameter
shuffle = TRUE # randomize the position of sounds
)
# Chunk 7
synth_data <- synth_data[synth_data$sound.id %in% master_annotations$sound.id, ]
mtch <- c(na.omit(match(master_annotations$sound.id, synth_data$sound.id)))
synth_data <- synth_data[mtch, ]
# cbind(c(1, synth_data$sound.id[1:5]), master_annotations$sound.id[1:6])
kbl <- kableExtra::kable(head(synth_data, 10), align = "c", row.names = F,  format = "html", escape = F)
if(knitr::is_html_output(excludes = "markdown"))
kbl <- kableExtra::kable_styling(kbl, bootstrap_options = "striped", font_size = 14)
# kbl <- kableExtra::scroll_box(kbl, width = "800px", height = "300px")
if (knitr::is_html_output(excludes = "markdown"))
print(kbl) else
kableExtra::landscape(knitr::kable(head(synth_data, 10), row.names = FALSE))
# Chunk 10
kbl <- kableExtra::kable(head(master_annotations), align = "c", row.names = F,  format = "html", escape = F)
kbl <- kableExtra::kable_styling(kbl, bootstrap_options = "striped", font_size = 14)
if (knitr::is_html_output(excludes = "markdown"))
print(kbl) else
kableExtra::landscape(knitr::kable(head(master_annotations, 10), row.names = FALSE))
# Chunk 13
# directory path where supplementary files have been saved
options(sound.files.path = path_to_files, mc.cores = 2)
markers_in_tests <-
find_markers(X = master_annotations)
kbl <- kableExtra::kable(head(markers_in_tests), align = "c", row.names = F,  format = "html", escape = F)
kbl <- kableExtra::kable_styling(kbl, bootstrap_options = "striped", font_size = 14)
if (knitr::is_html_output(excludes = "markdown"))
print(kbl) else
kableExtra::landscape(knitr::kable(head(markers_in_tests, 10), row.names = FALSE))
# Chunk 14
# average mismatch
mean(markers_in_tests$time.mismatch, na.rm = TRUE)
# maximum mismatch
max(markers_in_tests$time.mismatch, na.rm = TRUE)
# Chunk 16
options(sound.files.path = path_to_files, mc.cores = parallel::detectCores() -3 , pb = FALSE)
markers_in_tests <-
find_markers(X = master_annotations,  # annotations of sounds in master file
cores = 1, pb = F, hop.size = 4, ovlp = 50) # path to sound files
test_data
plot_blur_ratio(X = test_data, type = "spectrum", ovlp = 95)
plot_blur_ratio(X = test_data[test_data$sound.id == "dur:0.1;freq:0.5;fm;am_2" & test_data$distance %in% c(1, 30) & grepl("trnsc1_1m_open|trnsc2_30m_closed", test_data$sound.files), ], ovlp = 95, path = "/home/m/Dropbox/Projects/barulho_paper/data/raw/tlalpan_data/", dest.path = tempdir(), cores = 20, pb = T, colors = viridis::viridis(3, begin = 0.1, alpha = 0.8), res = 300)
plot_blur_ratio(X = test_data[test_data$sound.id == "dur:0.1;freq:2.5;fm;am_3", ], ovlp = 95)
plot_blur_ratio(X = test_data[test_data$sound.id == "dur:0.1;freq:0.5;fm;am_2" & test_data$distance %in% c(1, 30) & grepl("trnsc1_1m_open|trnsc2_30m_closed", test_data$sound.files), ], ovlp = 95, path = "/home/m/Dropbox/Projects/barulho_paper/data/raw/tlalpan_data/", dest.path = tempdir(), cores = 20, pb = T, colors = viridis::viridis(3, begin = 0.1, alpha = 0.8), res = 300)
setwd("/home/m/Dropbox/Projects/barulho_paper/data/raw/tlalpan_data/")
plot_blur_ratio(X = test_data[test_data$sound.id == "dur:0.1;freq:0.5;fm;am_2" & test_data$distance %in% c(1, 30) & grepl("trnsc1_1m_open|trnsc2_30m_closed", test_data$sound.files), ], ovlp = 95, path = "/home/m/Dropbox/Projects/barulho_paper/data/raw/tlalpan_data/", cores = 20, pb = T, colors = viridis::viridis(3, begin = 0.1, alpha = 0.8), res = 300)
plot_blur_ratio(X = test_data[test_data$sound.id == "dur:0.1;freq:0.5;fm;am_2" & test_data$distance %in% c(1, 30) & grepl("trnsc1_1m_open|trnsc2_30m_closed", test_data$sound.files), ], ovlp = 95, path = "/home/m/Dropbox/Projects/barulho_paper/data/raw/tlalpan_data/", dest.path = tempdir(), cores = 20, pb = T, colors = viridis::viridis(3, begin = 0.1, alpha = 0.8), res = 300, palette = mako)
plot_blur_ratio(X = test_data[test_data$sound.id == "dur:0.1;freq:0.5;fm;am_2" & test_data$distance %in% c(1, 30) & grepl("trnsc1_1m_open|trnsc2_30m_closed", test_data$sound.files), ], ovlp = 95, path = "/home/m/Dropbox/Projects/barulho_paper/data/raw/tlalpan_data/", cores = 20, pb = T, colors = viridis::viridis(3, begin = 0.1, alpha = 0.8), res = 300, palette = mako)
# Load the necessary package
library(magick)
# Specify the folder containing images
folder_path <- "/home/m/Dropbox/Projects/barulho_paper/manuscript/"
# Get a list of image files in the folder
image_files <- list.files(folder_path, pattern = "\\.(jpg|jpeg|png|bmp|tiff)$", full.names = TRUE, ignore.case = TRUE)
# Initialize a data frame to store results
image_resolutions <- data.frame(
File = character(),
Width_Pixels = integer(),
Height_Pixels = integer(),
X_PPI = numeric(),
Y_PPI = numeric(),
stringsAsFactors = FALSE
)
# Loop through the image files
for (image_path in image_files) {
# Read the image
img <- image_read(image_path)
# Get image information
info <- image_info(img)
# Extract PPI (resolution metadata)
attrs <- image_attributes(img)
x_ppi <- info$density
# y_ppi <- as.numeric(attrs$density_y)
# Add the information to the data frame
image_resolutions <- rbind(image_resolutions, data.frame(
File = image_path,
Width_Pixels = info$width,
Height_Pixels = info$height,
X_PPI = ifelse(is.na(x_ppi), NA, x_ppi),
# Y_PPI = ifelse(is.na(y_ppi), NA, y_ppi),
stringsAsFactors = FALSE
))
}
# View the resolutions
print(image_resolutions)
degrad_df <- read.csv("https://figshare.com/ndownloader/files/50981481")
View(degrad_df)
